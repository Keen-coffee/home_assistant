esp32_ble_tracker:

ble_client:
  - mac_address: "XX:XX:XX:XX:XX:XX" #Change to the easystart mac
    id: ble_client_1

text_sensor:
  - platform: template
    name: "Status"
    id: status
            
sensor:
  - platform: template
    name: "Live Current"
    id: live_current_sen
    device_class: current
    state_class: measurement
    unit_of_measurement: "Amps"

  - platform: template
    name: "Line Frequency"
    id: line_frequency_sen
    device_class: frequency
    state_class: measurement
    unit_of_measurement: "Hz"

  - platform: template
    name: "Last Start Peak"
    id: last_start_peak_sen
    device_class: current
    state_class: total
    unit_of_measurement: "Amps"

  - platform: template
    name: "SCPT Delay"
    id: scpt_delay_sen
    unit_of_measurement: "Seconds"

  - platform: template
    name: "Total Faults"
    id: total_faults_sen
    
  - platform: template
    name: "Total Starts"
    id: total_starts_sen

  - platform: ble_client
    type: characteristic
    ble_client_id: ble_client_1
    service_uuid:        "d973f2e0-b19e-11e2-9e96-0800200c9a66"
    characteristic_uuid: "d973f2e1-b19e-11e2-9e96-0800200c9a66"
    name: "EasyStart Diag"
    update_interval: never
    notify: True
    lambda: |-
        uint8_t* data = (uint8_t*) x.data();
        size_t length = x.size();

        // Convert the response to a hexadecimal string
        std::string hex_str;
        for (size_t i = 0; i < length; ++i) {
            char buf[3];
            snprintf(buf, sizeof(buf), "%02X", data[i]);
            hex_str += buf;
        }

        // Check if the response contains the success message
        std::string response = std::string((char*)x.data(), x.size());
        if (response.find("{\"Sts\": Success}") != std::string::npos) {
            ESP_LOGD("ble_client", "Success Response: %s", response.c_str());
        } else {
            ESP_LOGD("ble_client", "Data Response (Hex): %s", hex_str.c_str());

            // Ensure there are enough bytes for extraction
            if (length >= 18) {
                float factor = 256.0;

                // Extract and log Live Current
                float live_current = ((data[4] & 0xFF) + ((data[5] & 0xFF) * factor)) / 10.0;
                ESP_LOGD("ble_client", "Live Current: %.1f", live_current);
                id(live_current_sen).publish_state(live_current);

                // Extract and log Line Frequency
                float line_frequency = 500000.0 / ((data[6] & 0xFF) + ((data[7] & 0xFF) * factor));
                ESP_LOGD("ble_client", "Line Frequency: %.1f", line_frequency);
                id(line_frequency_sen).publish_state(line_frequency);

                // Extract and log Last Start Peak
                float last_start_peak = ((data[8] & 0xFF) + ((data[9] & 0xFF) * factor)) / 10.0;
                ESP_LOGD("ble_client", "Last Start Peak: %.1f", last_start_peak);
                id(last_start_peak_sen).publish_state(last_start_peak);

                // Extract and log SCPT Delay
                uint16_t scpt_delay = (data[10] & 0xFF) + ((data[11] & 0xFF) * 256);
                ESP_LOGD("ble_client", "SCPT Delay: %u", scpt_delay);
                id(scpt_delay_sen).publish_state(scpt_delay);

                // Extract and log Total Faults
                uint16_t total_faults = (data[12] & 0xFF) + ((data[13] & 0xFF) * 256);
                ESP_LOGD("ble_client", "Total Faults: %u", total_faults);
                id(total_faults_sen).publish_state(total_faults);

                // Extract and log Total Starts
                uint32_t total_starts = data[14] + (data[15] << 8) + (data[16] << 16) + (data[17] << 24);
                ESP_LOGD("ble_client", "Total Starts: %u", total_starts);
                id(total_starts_sen).publish_state(total_starts);

                // Extract and log Status Text
                uint8_t status_index = data[0] & 0xFF;
                const char* status_text[] = {"Normal", "Unexpctd Curr Flt", "Short Cycle Delay", "Pwr Intrrptn Fault", "Stall Fault", "Stuck SR Fault", "Open Ovrld Fault", "Overcurrent Fault", "Bad Wiring Fault", "Wrong Voltage Flt"};
                if (status_index < sizeof(status_text) / sizeof(status_text[0])) {
                    ESP_LOGD("ble_client", "Status: %s", status_text[status_index]);
                    id(status).publish_state(status_text[status_index]);
                } else {
                    ESP_LOGD("ble_client", "Status: Unknown (%u)", status_index);
                    id(status).publish_state("Unknown");
                }
            } else {
                ESP_LOGD("ble_client", "Data Response is too short to extract all values");
            }
        }

        // Return a dummy value to comply with the lambda return type
        return (float)length;

interval:
  - interval: 60s
    then:
      - ble_client.ble_write:
          id: ble_client_1
          service_uuid: "d973f2e0-b19e-11e2-9e96-0800200c9a66"
          characteristic_uuid: "d973f2e2-b19e-11e2-9e96-0800200c9a66"
          value: [0x7B, 0x22, 0x43, 0x6D, 0x64, 0x22, 0x3A, 0x20, 0x52, 0x65, 0x61, 0x64, 0x4C, 0x69, 0x76, 0x65, 0x7D]
